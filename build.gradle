import org.yaml.snakeyaml.DumperOptions
import org.yaml.snakeyaml.Yaml

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.yaml:snakeyaml:1.27")
    }
}


plugins {
	id 'org.springframework.boot' version '2.4.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'com.palantir.docker' version '0.26.0'
	id 'com.google.cloud.tools.jib' version '2.7.1'
}

group = 'feri'
version = getVersion()
sourceCompatibility = '11'

ext {
	appMainClassName = 'pf.reactivetest.ReactivetestApplication'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
}

bootJar {
    mainClassName = appMainClassName
}

test {
	useJUnitPlatform()
}

task prepareDockerfile(type: Copy) {
    from 'docker/Dockerfile.template'
    rename '.*', "${buildDir.name}/Dockerfile"
    destinationDir projectDir
    expand (JARNAME: jar.archiveName)    
}

bootJar.dependsOn prepareDockerfile


docker {
	//dependsOn prepareDockerfile
	name "$project.name:$version"
	dockerfile file( "${buildDir}/Dockerfile" )
	files jar.archiveFile
	//noCache true
}

jib {
  from {
    image = 'adoptopenjdk/openjdk15:x86_64-alpine-jre-15.0.2_7'
  }
  to {
    image = "$project.name:$version" 
  }
  container {
    jvmFlags = ['-Dmy.property=example.value', '-Xms512m']
    mainClass = appMainClassName
    args = ['some', 'args']
    ports = ['8080']
  }
}

def getVersion() {
	def cfg = new org.yaml.snakeyaml.Yaml().load( new File("$projectDir/src/main/resources/application.yml").newInputStream() )
	return cfg.app.version
}
